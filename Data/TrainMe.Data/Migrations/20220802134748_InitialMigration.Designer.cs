// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainMe.Data;

#nullable disable

namespace TrainMe.Data.Migrations
{
    [DbContext(typeof(TrainMeContext))]
    [Migration("20220802134748_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TrainMe.Data.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BreakDefault")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("RepetitionsDefault")
                        .HasColumnType("int");

                    b.Property<int>("SeriesDefault")
                        .HasColumnType("int");

                    b.Property<string>("TempoDefault")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("TrainMe.Data.Models.ExerciseInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Break")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Repetitions")
                        .HasColumnType("int");

                    b.Property<int>("Series")
                        .HasColumnType("int");

                    b.Property<string>("Tempo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseInstances");
                });

            modelBuilder.Entity("TrainMe.Data.Models.ExerciseInstanceInWorkoutDayInstance", b =>
                {
                    b.Property<int>("ExerciseInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutDayInstanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ExerciseInstanceId", "WorkoutDayInstanceId");

                    b.HasIndex("WorkoutDayInstanceId");

                    b.ToTable("ExerciseInstancesInWorkoutDayInstances");
                });

            modelBuilder.Entity("TrainMe.Data.Models.ExerciseInWorkoutDay", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutDayId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ExerciseId", "WorkoutDayId");

                    b.HasIndex("WorkoutDayId");

                    b.ToTable("ExercisesInWorkoutDays");
                });

            modelBuilder.Entity("TrainMe.Data.Models.ExerciseResource", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ExerciseId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ExerciseResources");
                });

            modelBuilder.Entity("TrainMe.Data.Models.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("TrainMe.Data.Models.ProgramInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.HasIndex("UserId");

                    b.ToTable("ProgramInstances");
                });

            modelBuilder.Entity("TrainMe.Data.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("TrainMe.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TrainMe.Data.Models.WorkoutDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRestDay")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("WorkoutDay");
                });

            modelBuilder.Entity("TrainMe.Data.Models.WorkoutDayInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsRestDay")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ProgramInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramInstanceId");

                    b.HasIndex("WorkoutDayId");

                    b.ToTable("WorkoutDayInstances");
                });

            modelBuilder.Entity("TrainMe.Data.Models.ExerciseInstance", b =>
                {
                    b.HasOne("TrainMe.Data.Models.Exercise", "Exercise")
                        .WithMany("ExerciseInstances")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("TrainMe.Data.Models.ExerciseInstanceInWorkoutDayInstance", b =>
                {
                    b.HasOne("TrainMe.Data.Models.ExerciseInstance", "ExerciseInstance")
                        .WithMany("ExerciseInstancesInProgramInstance")
                        .HasForeignKey("ExerciseInstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TrainMe.Data.Models.WorkoutDayInstance", "WorkoutDayInstance")
                        .WithMany("ExerciseInstancesInWorkoutDayInstances")
                        .HasForeignKey("WorkoutDayInstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExerciseInstance");

                    b.Navigation("WorkoutDayInstance");
                });

            modelBuilder.Entity("TrainMe.Data.Models.ExerciseInWorkoutDay", b =>
                {
                    b.HasOne("TrainMe.Data.Models.Exercise", "Exercise")
                        .WithMany("ExercisesInProgram")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TrainMe.Data.Models.WorkoutDay", "WorkoutDay")
                        .WithMany("ExercisesInWorkoutDay")
                        .HasForeignKey("WorkoutDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("WorkoutDay");
                });

            modelBuilder.Entity("TrainMe.Data.Models.ExerciseResource", b =>
                {
                    b.HasOne("TrainMe.Data.Models.Exercise", "Exercise")
                        .WithMany("ExerciseResources")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TrainMe.Data.Models.Resource", "Resource")
                        .WithMany("ExerciseResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("TrainMe.Data.Models.Program", b =>
                {
                    b.HasOne("TrainMe.Data.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("TrainMe.Data.Models.ProgramInstance", b =>
                {
                    b.HasOne("TrainMe.Data.Models.Program", "Program")
                        .WithMany("ProgramInstances")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TrainMe.Data.Models.User", "User")
                        .WithMany("ProgramInstances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainMe.Data.Models.WorkoutDay", b =>
                {
                    b.HasOne("TrainMe.Data.Models.Program", "Program")
                        .WithMany("WorkoutDays")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("TrainMe.Data.Models.WorkoutDayInstance", b =>
                {
                    b.HasOne("TrainMe.Data.Models.ProgramInstance", "ProgramInstance")
                        .WithMany("WorkoutDayInstances")
                        .HasForeignKey("ProgramInstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TrainMe.Data.Models.WorkoutDay", "WorkoutDay")
                        .WithMany("WorkoutDayInstances")
                        .HasForeignKey("WorkoutDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProgramInstance");

                    b.Navigation("WorkoutDay");
                });

            modelBuilder.Entity("TrainMe.Data.Models.Exercise", b =>
                {
                    b.Navigation("ExerciseInstances");

                    b.Navigation("ExerciseResources");

                    b.Navigation("ExercisesInProgram");
                });

            modelBuilder.Entity("TrainMe.Data.Models.ExerciseInstance", b =>
                {
                    b.Navigation("ExerciseInstancesInProgramInstance");
                });

            modelBuilder.Entity("TrainMe.Data.Models.Program", b =>
                {
                    b.Navigation("ProgramInstances");

                    b.Navigation("WorkoutDays");
                });

            modelBuilder.Entity("TrainMe.Data.Models.ProgramInstance", b =>
                {
                    b.Navigation("WorkoutDayInstances");
                });

            modelBuilder.Entity("TrainMe.Data.Models.Resource", b =>
                {
                    b.Navigation("ExerciseResources");
                });

            modelBuilder.Entity("TrainMe.Data.Models.User", b =>
                {
                    b.Navigation("ProgramInstances");
                });

            modelBuilder.Entity("TrainMe.Data.Models.WorkoutDay", b =>
                {
                    b.Navigation("ExercisesInWorkoutDay");

                    b.Navigation("WorkoutDayInstances");
                });

            modelBuilder.Entity("TrainMe.Data.Models.WorkoutDayInstance", b =>
                {
                    b.Navigation("ExerciseInstancesInWorkoutDayInstances");
                });
#pragma warning restore 612, 618
        }
    }
}
